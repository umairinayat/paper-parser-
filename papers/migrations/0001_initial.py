# Generated by Django 5.1.1 on 2025-07-26 23:17

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=200)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("affiliation", models.CharField(blank=True, max_length=500)),
                (
                    "orcid_id",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                ("h_index", models.IntegerField(blank=True, null=True)),
                ("citations_count", models.IntegerField(default=0)),
                ("papers_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Author",
                "verbose_name_plural": "Authors",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Journal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=300)),
                (
                    "issn",
                    models.CharField(blank=True, max_length=20, null=True, unique=True),
                ),
                ("publisher", models.CharField(blank=True, max_length=200)),
                ("impact_factor", models.FloatField(blank=True, null=True)),
                ("h_index", models.IntegerField(blank=True, null=True)),
                ("quartile", models.CharField(blank=True, max_length=10)),
                ("subject_area", models.CharField(blank=True, max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Journal",
                "verbose_name_plural": "Journals",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PaperAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "analysis_type",
                    models.CharField(
                        choices=[
                            ("summary", "Summary"),
                            ("key_findings", "Key Findings"),
                            ("methodology", "Methodology"),
                            ("limitations", "Limitations"),
                            ("future_work", "Future Work"),
                            ("impact", "Impact Assessment"),
                            ("comprehensive", "Comprehensive Analysis"),
                        ],
                        default="comprehensive",
                        max_length=20,
                    ),
                ),
                ("summary", models.TextField(blank=True)),
                ("key_findings", models.JSONField(default=list)),
                ("methodology", models.TextField(blank=True)),
                ("limitations", models.TextField(blank=True)),
                ("future_work", models.TextField(blank=True)),
                ("impact_assessment", models.TextField(blank=True)),
                ("methodology_type", models.CharField(blank=True, max_length=100)),
                ("dataset_info", models.TextField(blank=True)),
                ("evaluation_metrics", models.JSONField(default=list)),
                ("model_used", models.CharField(blank=True, max_length=100)),
                ("processing_time", models.FloatField(blank=True, null=True)),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("summary_embedding", models.JSONField(blank=True, null=True)),
                ("key_findings_embedding", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Paper Analysis",
                "verbose_name_plural": "Paper Analyses",
            },
        ),
        migrations.CreateModel(
            name="PaperAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                ("is_corresponding", models.BooleanField(default=False)),
                ("is_first_author", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="ScrapingTask",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("task_id", models.CharField(max_length=255, unique=True)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("arxiv", "ArXiv"),
                            ("semantic_scholar", "Semantic Scholar"),
                            ("pubmed", "PubMed"),
                            ("ieee", "IEEE"),
                        ],
                        max_length=20,
                    ),
                ),
                ("query", models.CharField(blank=True, max_length=500)),
                ("category", models.CharField(blank=True, max_length=100)),
                ("max_results", models.IntegerField(default=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("papers_found", models.IntegerField(default=0)),
                ("papers_processed", models.IntegerField(default=0)),
                ("papers_skipped", models.IntegerField(default=0)),
                ("papers_failed", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
                ("retry_count", models.IntegerField(default=0)),
                ("max_retries", models.IntegerField(default=3)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Scraping Task",
                "verbose_name_plural": "Scraping Tasks",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SearchQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query", models.CharField(max_length=500)),
                ("filters", models.JSONField(default=dict)),
                ("results_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Search Query",
                "verbose_name_plural": "Search Queries",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SearchResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("relevance_score", models.FloatField(blank=True, null=True)),
                ("rank", models.PositiveIntegerField()),
            ],
            options={
                "ordering": ["rank"],
            },
        ),
        migrations.CreateModel(
            name="Paper",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(db_index=True, max_length=500)),
                ("abstract", models.TextField(blank=True)),
                (
                    "doi",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                (
                    "arxiv_id",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                (
                    "pmid",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                ("publication_date", models.DateField(blank=True, null=True)),
                ("volume", models.CharField(blank=True, max_length=50)),
                ("issue", models.CharField(blank=True, max_length=50)),
                ("pages", models.CharField(blank=True, max_length=50)),
                ("authors", models.TextField(blank=True)),
                ("first_author", models.CharField(blank=True, max_length=200)),
                ("corresponding_author", models.CharField(blank=True, max_length=200)),
                ("keywords", models.JSONField(blank=True, default=list)),
                ("subject_areas", models.JSONField(blank=True, default=list)),
                ("full_text", models.TextField(blank=True)),
                ("summary", models.TextField(blank=True)),
                ("citation_count", models.IntegerField(default=0)),
                ("download_count", models.IntegerField(default=0)),
                ("view_count", models.IntegerField(default=0)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("arxiv", "ArXiv"),
                            ("semantic_scholar", "Semantic Scholar"),
                            ("pubmed", "PubMed"),
                            ("ieee", "IEEE"),
                            ("springer", "Springer"),
                            ("elsevier", "Elsevier"),
                            ("manual", "Manual Upload"),
                        ],
                        default="manual",
                        max_length=20,
                    ),
                ),
                ("source_url", models.URLField(blank=True)),
                (
                    "analysis_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("file", models.FileField(blank=True, null=True, upload_to="papers/")),
                ("file_size", models.BigIntegerField(blank=True, null=True)),
                ("file_hash", models.CharField(blank=True, max_length=64)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("scraped_at", models.DateTimeField(blank=True, null=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("processing_time", models.FloatField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                (
                    "journal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="papers.journal",
                    ),
                ),
            ],
            options={
                "verbose_name": "Paper",
                "verbose_name_plural": "Papers",
                "ordering": ["-created_at"],
            },
        ),
    ]
